@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> userManager
@inject RoleManager<IdentityRole> roleManager

<table class="table">
  <thead>
    <tr>
      <th>#</th>
      <th>User Name</th>
      <th>Email</th>
      <th>Name</th>
      <th>Role</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    @{
      int i = 0;
    }
    @foreach (var item in users)
    {
      <tr>
        <td>@{
            ++i;
          }@i</td>
        <td>@item.UserName</td>
        <td>@item.Email</td>
        <td>@item.Name</td>
        <td>@userRoles.GetValueOrDefault(item.Id)</td>
        <td>
          <button class="btn btn-primary" @onclick="(() => Edit(item))">
            Edit
          </button>
          <button class="btn btn-danger" @onclick="(() => Delete(item))">
            Delete
          </button>
        </td>
      </tr>
    }
  </tbody>
</table>
<button class="btn btn-success" @onclick="Add">Add</button>

@if (showPopup)
{
  <!-- This is the popup to create or edit -->
  <div class="modal" tabindex="-1" style="display:block" user="dialog">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">
            @(mode == 2 ? "Edit" : "Add") User
          </h3>
          <button type="button" class="close" @onclick="ClosePopup">
            <span aria-hidden="true">X</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <label for="username" class="form-label mt-4">UserName</label>
            <input type="text" class="form-control" id="username" placeholder="User Name" @bind="obj.UserName">
          </div>
          <div class="form-group">
            <label for="email" class="form-label mt-4">Email</label>
            <input type="email" class="form-control" id="email" placeholder="Email" @bind="obj.Email">
          </div>
          <div class="form-group">
            <label for="name" class="form-label mt-4">Name</label>
            <input type="text" class="form-control" id="name" placeholder="Name" @bind="obj.Name">
          </div>
          <div class="form-group">
            <label for="password" class="form-label mt-4">Password</label>
            <input type="password" class="form-control" id="password" placeholder="Password" @bind="obj.PasswordHash">
          </div>
          <div class="form-group">
            <label for="role" class="form-label mt-4">Select role</label>
            <select class="form-control" id="role" @bind="@CurrentRole">
              @foreach (var role in roles)
              {
                <option value="@role.Name">
                  @role.Name
                </option>
              }
            </select>
          </div>
          <br /><br />
          <button class="btn btn-primary" @onclick="Save">
            Save
          </button>
          <br /><br />
          <span style="color:red">@strError</span>
        </div>
      </div>
    </div>
  </div>
}

@if (showConfirm)
{
  <!-- This is the popup to confirm delete -->
  <div class="modal" tabindex="-1" style="display:block" user="dialog">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">Confirm Delete</h3>
          <button type="button" class="close" @onclick="ClosePopup">
            <span aria-hidden="true">X</span>
          </button>
        </div>
        <div class="modal-body">
          <p>Are you going to delete this?</p>
          <br /><br />
          <button class="btn btn-primary" @onclick="ConfirmDelete">
            Yes
          </button>
          <button class="btn btn-primary" @onclick="ClosePopup">
            No
          </button>
          <br /><br />
          <span style="color:red">@strError</span>
        </div>
      </div>
    </div>
  </div>
}

@code {
  string strError = "";
  bool showPopup = false;
  bool showConfirm = false;
  int mode = 0;
  List<ApplicationUser> users = new List<ApplicationUser>();
  Dictionary<string, string> userRoles = new Dictionary<string, string>();
  List<IdentityRole> roles = new List<IdentityRole>();
  ApplicationUser obj = new ApplicationUser();
  string CurrentRole = "Administrators";

  protected override async Task OnInitializedAsync()
  {
    await Task.Run(GetUsers);
  }

  async Task GetUsers()
  {
    userRoles = new Dictionary<string, string>();
    users = userManager.Users.Select(x => new ApplicationUser
    {
      Id = x.Id,
      UserName = x.UserName,
      Email = x.Email,
      Name = x.Name
    }).ToList();
    foreach (var user in users)
    {
      var r = await userManager.GetRolesAsync(user);
      userRoles.Add(user.Id, r.FirstOrDefault());
    }
  }

  void Add()
  {
    roles = roleManager.Roles.ToList();
    obj = new ApplicationUser();
    mode = 1;
    showPopup = true;
    showConfirm = false;
  }

  void Edit(ApplicationUser item)
  {
    roles = roleManager.Roles.ToList();
    obj = item;
    mode = 2;
    showPopup = true;
    showConfirm = false;
    CurrentRole = userRoles.GetValueOrDefault(item.Id);
  }

  async Task Save()
  {
    try
    {
      if (mode == 2)
      {
        var user = await userManager.FindByIdAsync(obj.Id);
        user.UserName = obj.UserName;
        user.Email = obj.Email;
        user.Name = obj.Name;
        var ret = await userManager.UpdateAsync(user);
        if (!ret.Succeeded)
        {
          if (ret
          .Errors
          .FirstOrDefault() != null)
          {
            strError =
            ret
            .Errors
            .FirstOrDefault()
            .Description;
          }
          else
          {
            strError = "Update error";
          }
          return;
        }
        else
        {
          string role = userRoles.GetValueOrDefault(user.Id);
          if (!string.IsNullOrEmpty(role) && !CurrentRole.Equals(role))
          {
            await userManager.RemoveFromRoleAsync(user, role);
          }
          if (!CurrentRole.Equals(role))
          {
            await userManager.AddToRoleAsync(user, CurrentRole);
          }
        }
      }
      else
      {
        ApplicationUser user = new ApplicationUser
        {
          UserName = obj.UserName,
          Email = obj.Email,
          Name = obj.Name
        };
        var ret = await userManager.CreateAsync(user, obj.PasswordHash);
        if (!ret.Succeeded)
        {
          if (ret
          .Errors
          .FirstOrDefault() != null)
          {
            strError =
            ret
            .Errors
            .FirstOrDefault()
            .Description;
          }
          else
          {
            strError = "Add error";
          }
          return;
        }
        else
        {
          await userManager.AddToRoleAsync(user, CurrentRole);
        }
      }
      ClosePopup();
      await Task.Run(GetUsers);
    }
    catch (Exception ex)
    {
      strError = ex.GetBaseException().Message;
    }
  }

  void Delete(ApplicationUser item)
  {
    obj = item;
    showPopup = false;
    showConfirm = true;
  }

  async Task ConfirmDelete()
  {
    var user = await userManager.FindByIdAsync(obj.Id);
    var ret = await userManager.DeleteAsync(user);
    if (!ret.Succeeded)
    {
      if (ret
      .Errors
      .FirstOrDefault() != null)
      {
        strError =
        ret
        .Errors
        .FirstOrDefault()
        .Description;
      }
      else
      {
        strError = "Delete error";
      }
      return;
    }
    ClosePopup();
    await Task.Run(GetUsers);
  }

  void ClosePopup()
  {
    strError = "";
    mode = 0;
    showPopup = false;
    showConfirm = false;
  }
}