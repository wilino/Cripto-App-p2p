@using Models
@using Data
@inject CryptocoinService cryptocoinService

<table class="table">
  <thead>
    <tr>
      <th>#</th>
      <th>Symbol</th>
      <th>Name</th>
      <th>Active</th>
      <th>Created At</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    @{
      int i = 0;
    }
    @foreach (var item in cryptocoins)
    {
      <tr>
        <td>@{
            ++i;
          }@i</td>
        <td>@item.Symbol</td>
        <td>@item.Name</td>
        <td>
          <div class="form-check form-switch">
            @if (item.Active)
            {
              <input class="form-check-input" type="checkbox" disabled="" checked="" />
            }
            else
            {
              <input class="form-check-input" type="checkbox" disabled="" />
            }
          </div>
        </td>
        <td>@item.CreatedAt</td>
        <td>
          <button class="btn btn-primary" @onclick="(() => Edit(item))">
            Edit
          </button>
          <button class="btn btn-danger" @onclick="(() => Delete(item))">
            Delete
          </button>
        </td>
      </tr>
    }
  </tbody>
</table>
<button class="btn btn-success" @onclick="Add">Add</button>

@if (showPopup)
{
  <!-- This is the popup to create or edit -->
  <div class="modal" tabindex="-1" style="display:block" role="dialog">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">@(mode == 2 ? "Edit" : "Add") Cryptocoin</h3>
          <button type="button" class="close" @onclick="ClosePopup">
            <span aria-hidden="true">X</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <label for="symbol" class="form-label mt-4">Symbol</label>
            <input type="text" class="form-control" id="symbol" placeholder="Symbol" @bind="obj.Symbol">
          </div>
          <div class="form-group">
            <label for="name" class="form-label mt-4">Name</label>
            <input type="text" class="form-control" id="name" placeholder="Name" @bind="obj.Name">
          </div>
          <br />
          <div class="form-check form-switch">
            @if (active)
            {
              <input class="form-check-input" type="checkbox" id="active" @onchange="ActiveChanged" checked="" />
            }
            else
            {
              <input class="form-check-input" type="checkbox" id="active" @onchange="ActiveChanged" />
            }
            <label class="form-check-label" for="active">Active</label>
          </div>
          <br /><br />
          <button class="btn btn-primary" @onclick="Save">
            Save
          </button>
          <br /><br />
          <span style="color:red">@strError</span>
        </div>
      </div>
    </div>
  </div>
}

@if (showConfirm)
{
  <!-- This is the popup to confirm delete -->
  <div class="modal" tabindex="-1" style="display:block" user="dialog">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">Confirm Delete</h3>
          <button type="button" class="close" @onclick="ClosePopup">
            <span aria-hidden="true">X</span>
          </button>
        </div>
        <div class="modal-body">
          <p>Are you going to delete this?</p>
          <br /><br />
          <button class="btn btn-primary" @onclick="ConfirmDelete">
            Yes
          </button>
          <button class="btn btn-primary" @onclick="ClosePopup">
            No
          </button>
          <br /><br />
          <span style="color:red">@strError</span>
        </div>
      </div>
    </div>
  </div>
}

@code {
  string strError = "";
  bool showPopup = false;
  bool showConfirm = false;
  int mode = 0;
  bool active = true;
  List<Cryptocoin> cryptocoins = new List<Cryptocoin>();
  Cryptocoin obj = new Cryptocoin();
  // Collection to display the existing items

  protected override async Task OnInitializedAsync()
  {
    await Task.Run(GetCryptocoins);
  }

  async Task GetCryptocoins()
  {
    cryptocoins = await cryptocoinService.GetAllCryptocoinsAsync();
  }

  void Add()
  {
    obj = new Cryptocoin();
    mode = 1;
    active = true;
    showPopup = true;
    showConfirm = false;
  }

  void Edit(Cryptocoin item)
  {
    obj = item;
    mode = 2;
    active = obj.Active;
    showPopup = true;
    showConfirm = false;
  }

  async Task Save()
  {
    try
    {
      obj.Active = active;
      // Is this an existing user?
      if (mode == 2)
      {
        var ret = await cryptocoinService.UpdateCryptocoinAsync(obj);
        if (!ret)
        {
          strError = "Add error";
          return;
        }
      }
      else
      {
        var ret = await cryptocoinService.InsertCryptocoinAsync(obj);
        if (!ret)
        {
          strError = "Add error";
          return;
        }
      }
      ClosePopup();
      await Task.Run(GetCryptocoins);
    }
    catch (Exception ex)
    {
      strError = ex.GetBaseException().Message;
    }
  }

  void Delete(Cryptocoin item)
  {
    obj = item;
    showPopup = false;
    showConfirm = true;
  }

  async Task ConfirmDelete()
  {
    var ret = await cryptocoinService.DeleteCryptocoinAsync(obj);
    ClosePopup();
    await Task.Run(GetCryptocoins);
  }

  void ClosePopup()
  {
    strError = "";
    mode = 0;
    showPopup = false;
    showConfirm = false;
  }

  void ActiveChanged()
  {
    active = !active;
  }
}
